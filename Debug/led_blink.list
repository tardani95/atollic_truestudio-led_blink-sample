
led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000524  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000630  08000638  00010638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000630  08000630  00010630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000634  08000634  00010634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000638  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000001c  08000638  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010638  2**0
                  CONTENTS, READONLY
  9 .debug_info   000020b4  00000000  00000000  00010661  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000770  00000000  00000000  00012715  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002a0  00000000  00000000  00012e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00013128  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000fe7  00000000  00000000  00013370  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000fe3  00000000  00000000  00014357  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001533a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000009c8  00000000  00000000  000153b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00015d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000618 	.word	0x08000618

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000618 	.word	0x08000618

0800014c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	61bb      	str	r3, [r7, #24]
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	f003 030f 	and.w	r3, r3, #15
 8000176:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	78db      	ldrb	r3, [r3, #3]
 800017c:	f003 0310 	and.w	r3, r3, #16
 8000180:	2b00      	cmp	r3, #0
 8000182:	d005      	beq.n	8000190 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	4313      	orrs	r3, r2
 800018e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d044      	beq.n	8000224 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	e038      	b.n	8000218 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001a6:	2201      	movs	r2, #1
 80001a8:	69bb      	ldr	r3, [r7, #24]
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4013      	ands	r3, r2
 80001ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d126      	bne.n	8000212 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001ca:	220f      	movs	r2, #15
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	fa02 f303 	lsl.w	r3, r2, r3
 80001d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	43db      	mvns	r3, r3
 80001d8:	697a      	ldr	r2, [r7, #20]
 80001da:	4013      	ands	r3, r2
 80001dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d105      	bne.n	8000200 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80001f4:	2201      	movs	r2, #1
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	409a      	lsls	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	615a      	str	r2, [r3, #20]
 80001fe:	e008      	b.n	8000212 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b48      	cmp	r3, #72	; 0x48
 8000206:	d104      	bne.n	8000212 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000208:	2201      	movs	r2, #1
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	409a      	lsls	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	3301      	adds	r3, #1
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9c3      	bls.n	80001a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d946      	bls.n	80002ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e03a      	b.n	80002ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d127      	bne.n	80002a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3308      	adds	r3, #8
 800028c:	2201      	movs	r2, #1
 800028e:	409a      	lsls	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d105      	bne.n	80002a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3308      	adds	r3, #8
 80002a0:	2201      	movs	r2, #1
 80002a2:	409a      	lsls	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d9c1      	bls.n	8000238 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	605a      	str	r2, [r3, #4]
  }
}
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	807b      	strh	r3, [r7, #2]
 80002d0:	4613      	mov	r3, r2
 80002d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80002d4:	787b      	ldrb	r3, [r7, #1]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d003      	beq.n	80002e2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80002da:	887a      	ldrh	r2, [r7, #2]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80002e0:	e002      	b.n	80002e8 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 80002e2:	887a      	ldrh	r2, [r7, #2]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	615a      	str	r2, [r3, #20]
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
	...

080002f4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d006      	beq.n	8000314 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000306:	4909      	ldr	r1, [pc, #36]	; (800032c <RCC_APB2PeriphClockCmd+0x38>)
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <RCC_APB2PeriphClockCmd+0x38>)
 800030a:	699a      	ldr	r2, [r3, #24]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4313      	orrs	r3, r2
 8000310:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000312:	e006      	b.n	8000322 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000314:	4905      	ldr	r1, [pc, #20]	; (800032c <RCC_APB2PeriphClockCmd+0x38>)
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <RCC_APB2PeriphClockCmd+0x38>)
 8000318:	699a      	ldr	r2, [r3, #24]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	43db      	mvns	r3, r3
 800031e:	4013      	ands	r3, r2
 8000320:	618b      	str	r3, [r1, #24]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000

08000330 <main>:
**
**===========================================================================
*/

int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  SystemInit();
 8000336:	f000 f891 	bl	800045c <SystemInit>

  GPIO_InitTypeDef GPIO_InitStructure_OUT;


  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800033a:	2101      	movs	r1, #1
 800033c:	2010      	movs	r0, #16
 800033e:	f7ff ffd9 	bl	80002f4 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure_OUT.GPIO_Mode = GPIO_Mode_Out_PP;
 8000342:	2310      	movs	r3, #16
 8000344:	70fb      	strb	r3, [r7, #3]
  GPIO_InitStructure_OUT.GPIO_Pin = GPIO_Pin_13;
 8000346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800034a:	803b      	strh	r3, [r7, #0]
  GPIO_InitStructure_OUT.GPIO_Speed = GPIO_Speed_50MHz;
 800034c:	2303      	movs	r3, #3
 800034e:	70bb      	strb	r3, [r7, #2]
  GPIO_Init(GPIOC, &GPIO_InitStructure_OUT);
 8000350:	463b      	mov	r3, r7
 8000352:	4619      	mov	r1, r3
 8000354:	4815      	ldr	r0, [pc, #84]	; (80003ac <main+0x7c>)
 8000356:	f7ff fef9 	bl	800014c <GPIO_Init>

  GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000360:	4812      	ldr	r0, [pc, #72]	; (80003ac <main+0x7c>)
 8000362:	f7ff ffaf 	bl	80002c4 <GPIO_WriteBit>


  int i = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]

  while(1)
  {
	  /* the built in led on PC13 blinks with 1 second duration */
	  /* turn on PC13 */
	  GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000370:	480e      	ldr	r0, [pc, #56]	; (80003ac <main+0x7c>)
 8000372:	f7ff ffa7 	bl	80002c4 <GPIO_WriteBit>

	  /* delay 1 sec */
	  for (i=0;i<10000000;i++){
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <main+0x80>)
 800037e:	4293      	cmp	r3, r2
 8000380:	dc03      	bgt.n	800038a <main+0x5a>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3301      	adds	r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	e7f7      	b.n	800037a <main+0x4a>

	  }
	  /* turn off PC13 */
	  GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000390:	4806      	ldr	r0, [pc, #24]	; (80003ac <main+0x7c>)
 8000392:	f7ff ff97 	bl	80002c4 <GPIO_WriteBit>

	  /* delay 1 sec */
	  for (i=0;i<10000000;i++){
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <main+0x80>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	dce3      	bgt.n	800036a <main+0x3a>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	e7f7      	b.n	800039a <main+0x6a>
 80003aa:	bf00      	nop
 80003ac:	40011000 	.word	0x40011000
 80003b0:	0098967f 	.word	0x0098967f

080003b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003ba:	e003      	b.n	80003c4 <LoopCopyDataInit>

080003bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80003be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003c2:	3104      	adds	r1, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80003c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003cc:	d3f6      	bcc.n	80003bc <CopyDataInit>
	ldr	r2, =_sbss
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80003d0:	e002      	b.n	80003d8 <LoopFillZerobss>

080003d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003d4:	f842 3b04 	str.w	r3, [r2], #4

080003d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80003da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003dc:	d3f9      	bcc.n	80003d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003de:	f000 f83d 	bl	800045c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e2:	f000 f8f5 	bl	80005d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003e6:	f7ff ffa3 	bl	8000330 <main>
	bx	lr
 80003ea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003ec:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80003f0:	08000638 	.word	0x08000638
	ldr	r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003f8:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80003fc:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000400:	2000001c 	.word	0x2000001c

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_2_IRQHandler>

08000406 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000416:	e7fe      	b.n	8000416 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800041c:	e7fe      	b.n	800041c <MemManage_Handler+0x4>

0800041e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000422:	e7fe      	b.n	8000422 <BusFault_Handler+0x4>

08000424 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000428:	e7fe      	b.n	8000428 <UsageFault_Handler+0x4>

0800042a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
	...

0800045c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000460:	4a15      	ldr	r2, [pc, #84]	; (80004b8 <SystemInit+0x5c>)
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <SystemInit+0x5c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800046c:	4912      	ldr	r1, [pc, #72]	; (80004b8 <SystemInit+0x5c>)
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <SystemInit+0x5c>)
 8000470:	685a      	ldr	r2, [r3, #4]
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <SystemInit+0x60>)
 8000474:	4013      	ands	r3, r2
 8000476:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000478:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <SystemInit+0x5c>)
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <SystemInit+0x5c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000486:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000488:	4a0b      	ldr	r2, [pc, #44]	; (80004b8 <SystemInit+0x5c>)
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <SystemInit+0x5c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000492:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000494:	4a08      	ldr	r2, [pc, #32]	; (80004b8 <SystemInit+0x5c>)
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <SystemInit+0x5c>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800049e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <SystemInit+0x5c>)
 80004a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004a6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80004a8:	f000 f80c 	bl	80004c4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <SystemInit+0x64>)
 80004ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	f8ff0000 	.word	0xf8ff0000
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80004c8:	f000 f802 	bl	80004d0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	2300      	movs	r3, #0
 80004dc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004de:	4a3a      	ldr	r2, [pc, #232]	; (80005c8 <SetSysClockTo72+0xf8>)
 80004e0:	4b39      	ldr	r3, [pc, #228]	; (80005c8 <SetSysClockTo72+0xf8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <SetSysClockTo72+0xf8>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3301      	adds	r3, #1
 80004f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d103      	bne.n	8000508 <SetSysClockTo72+0x38>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000506:	d1f0      	bne.n	80004ea <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000508:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <SetSysClockTo72+0xf8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000514:	2301      	movs	r3, #1
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	e001      	b.n	800051e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d14b      	bne.n	80005bc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <SetSysClockTo72+0xfc>)
 8000526:	4b29      	ldr	r3, [pc, #164]	; (80005cc <SetSysClockTo72+0xfc>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f043 0310 	orr.w	r3, r3, #16
 800052e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000530:	4a26      	ldr	r2, [pc, #152]	; (80005cc <SetSysClockTo72+0xfc>)
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <SetSysClockTo72+0xfc>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f023 0303 	bic.w	r3, r3, #3
 800053a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800053c:	4a23      	ldr	r2, [pc, #140]	; (80005cc <SetSysClockTo72+0xfc>)
 800053e:	4b23      	ldr	r3, [pc, #140]	; (80005cc <SetSysClockTo72+0xfc>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f043 0302 	orr.w	r3, r3, #2
 8000546:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000548:	4a1f      	ldr	r2, [pc, #124]	; (80005c8 <SetSysClockTo72+0xf8>)
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SetSysClockTo72+0xf8>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <SetSysClockTo72+0xf8>)
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <SetSysClockTo72+0xf8>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000558:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <SetSysClockTo72+0xf8>)
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <SetSysClockTo72+0xf8>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000562:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000564:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <SetSysClockTo72+0xf8>)
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <SetSysClockTo72+0xf8>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800056e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000570:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <SetSysClockTo72+0xf8>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <SetSysClockTo72+0xf8>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800057a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <SetSysClockTo72+0xf8>)
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <SetSysClockTo72+0xf8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000586:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000588:	bf00      	nop
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <SetSysClockTo72+0xf8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <SetSysClockTo72+0xf8>)
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <SetSysClockTo72+0xf8>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f023 0303 	bic.w	r3, r3, #3
 80005a0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <SetSysClockTo72+0xf8>)
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <SetSysClockTo72+0xf8>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80005ae:	bf00      	nop
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <SetSysClockTo72+0xf8>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	f003 030c 	and.w	r3, r3, #12
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d1f9      	bne.n	80005b0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40022000 	.word	0x40022000

080005d0 <__libc_init_array>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2500      	movs	r5, #0
 80005d4:	4e0c      	ldr	r6, [pc, #48]	; (8000608 <__libc_init_array+0x38>)
 80005d6:	4c0d      	ldr	r4, [pc, #52]	; (800060c <__libc_init_array+0x3c>)
 80005d8:	1ba4      	subs	r4, r4, r6
 80005da:	10a4      	asrs	r4, r4, #2
 80005dc:	42a5      	cmp	r5, r4
 80005de:	d109      	bne.n	80005f4 <__libc_init_array+0x24>
 80005e0:	f000 f81a 	bl	8000618 <_init>
 80005e4:	2500      	movs	r5, #0
 80005e6:	4e0a      	ldr	r6, [pc, #40]	; (8000610 <__libc_init_array+0x40>)
 80005e8:	4c0a      	ldr	r4, [pc, #40]	; (8000614 <__libc_init_array+0x44>)
 80005ea:	1ba4      	subs	r4, r4, r6
 80005ec:	10a4      	asrs	r4, r4, #2
 80005ee:	42a5      	cmp	r5, r4
 80005f0:	d105      	bne.n	80005fe <__libc_init_array+0x2e>
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005f8:	4798      	blx	r3
 80005fa:	3501      	adds	r5, #1
 80005fc:	e7ee      	b.n	80005dc <__libc_init_array+0xc>
 80005fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000602:	4798      	blx	r3
 8000604:	3501      	adds	r5, #1
 8000606:	e7f2      	b.n	80005ee <__libc_init_array+0x1e>
 8000608:	08000630 	.word	0x08000630
 800060c:	08000630 	.word	0x08000630
 8000610:	08000630 	.word	0x08000630
 8000614:	08000634 	.word	0x08000634

08000618 <_init>:
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	bf00      	nop
 800061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061e:	bc08      	pop	{r3}
 8000620:	469e      	mov	lr, r3
 8000622:	4770      	bx	lr

08000624 <_fini>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	bf00      	nop
 8000628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062a:	bc08      	pop	{r3}
 800062c:	469e      	mov	lr, r3
 800062e:	4770      	bx	lr
